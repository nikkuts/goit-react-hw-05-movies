{"version":3,"file":"static/js/426.632ec705.chunk.js","mappings":"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","sources":["page/Movies/Movies.jsx","servise/api.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { Circles } from  'react-loader-spinner';\nimport API from 'servise/api';\n\nconst Movies = () => {\n    const [queryMovie, setQueryMovie] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const query = searchParams.get('query') ?? '';\n    const location = useLocation();   \n\n    async function handleFetchMovie (que) {\n        setIsLoading(true);\n\n    try {\n      const {data} = await API.searchMovie(que); \n      setQueryMovie(data.results);\n      } \n      catch (error) {\n        alert(\"Sorry, there are no movies. Please try again.\"); \n      } \n      finally {\n        setIsLoading(false);\n      };\n    };\n\n    const handleSubmit = evt => {\n      evt.preventDefault();\n      const form = evt.currentTarget;\n      setSearchParams({query: form.elements.query.value});\n      form.reset(); \n    };\n\n    useEffect(() => {\n      if (query === '') {\n        return;\n      }\n      handleFetchMovie(query); \n      }, [query]); \n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n        type='text'\n        name=\"query\" \n        />\n        <button type='submit'>Search</button>\n      </form>\n      <div>\n        {isLoading && <Circles/>}\n\n        <ul>\n        {queryMovie.map(({id, title}) => (\n            <li key={id}>\n            <Link to={`:${id}`} state={{from: location}}>{title}</Link>\n            </li>))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Movies;\n\n// const Movies = () => {\n//   const [queryMovie, setQueryMovie] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [searchQuery, setSearchQuery] = useState('');\n\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const query = searchParams.get('query') ?? '';\n// console.log(searchParams);\n// console.log(query);\n//   async function handleFetchMovie (que) {\n//       setIsLoading(true);\n\n//   try {\n//     const {data} = await API.searchMovie(que); \n//     setQueryMovie(data.results);\n//     } \n//     catch (error) {\n//       alert(\"Sorry, there are no movies. Please try again.\"); \n//     } \n//     finally {\n//       setIsLoading(false);\n//     };\n//   };\n\n//   const updateQueryString = evt => {\n//     if (evt.target.value === '') {\n//       return setSearchParams({});\n//     }\n//     setSearchParams({query: evt.target.value});\n//   };\n\n//   const handleSubmit = evt => {\n//     evt.preventDefault();\n//     console.log('hello');\n//     setSearchQuery(query); console.log(query);\n//   };\n\n//   useEffect(() => {\n//     searchQuery &&\n//     handleFetchMovie(searchQuery); \n//     }, [searchQuery]); \n\n// return (\n//   <div>\n//     <form onSubmit={handleSubmit}>\n//       <input\n//       type='text'\n//       value={query}\n//       onChange={updateQueryString} \n//       />\n//       <button type='submit'>Search</button>\n//     </form>\n//     <div>\n//       {isLoading && <Circles/>}\n\n//       <ul>\n//       {queryMovie.map(({id, title}) => (\n//           <li key={id}>\n//           <Link to={`:${id}`}>{title}</Link>\n//           </li>))}\n//       </ul>\n//     </div>\n//   </div>\n// );\n// };","import axios from \"axios\";\n\nasync function getTrending () {\n    const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function searchMovie (q) {\n    const BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n        query: q,\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function getMovieDetails (movie_id) {\n    const BASE_URL = `https://api.themoviedb.org/3/movie/${movie_id}`;\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function getMovieCredits (movie_id) {\n    const BASE_URL = `https://api.themoviedb.org/3/movie/${movie_id}/credits`;\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function getMovieReviews (movie_id) {\n    const BASE_URL = `https://api.themoviedb.org/3/movie/${movie_id}/reviews`;\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nconst API = {\n    getTrending,\n    searchMovie,\n    getMovieDetails,\n    getMovieCredits,\n    getMovieReviews,\n};\n\nexport default API;"],"names":["useState","queryMovie","setQueryMovie","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","que","API","data","results","alert","useEffect","handleFetchMovie","onSubmit","evt","preventDefault","form","currentTarget","elements","value","reset","type","name","map","id","title","to","state","from","getTrending","params","URLSearchParams","api_key","axios","searchMovie","q","getMovieDetails","movie_id","BASE_URL","getMovieCredits","getMovieReviews"],"sourceRoot":""}