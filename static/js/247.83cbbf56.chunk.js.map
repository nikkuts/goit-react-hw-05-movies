{"version":3,"file":"static/js/247.83cbbf56.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","servise/api.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { nanoid } from 'nanoid';\nimport API from 'servise/api';\n\nconst Cast = () => {\n  const [isRender, setIsRender] = useState(false);\n  const [movieCast, setMovieCast] = useState({});\n\n  const { movieId } = useParams(); \n  const fetchId = movieId.slice(1, movieId.length);\n\n  function getPoster(profile_path) {\n    if (profile_path) {\n      return `http://image.tmdb.org/t/p/w342/${profile_path}`;\n    }\n    return 'https://t4.ftcdn.net/jpg/04/99/93/31/360_F_499933117_ZAUBfv3P1HEOsZDrnkbNCt4jc3AodArl.jpg';\n  };\n\n  async function handleFetchMovie (id) {\n    setIsRender(false);\n      \n  try {\n    const {data} = await API.getMovieCredits(id); \n    setMovieCast(data.cast); \n    setIsRender(true);\n    } \n    catch (error) {\n      alert(\"Sorry. Please try again.\"); \n    } \n  };\n\n  useEffect(() => {\n    handleFetchMovie(fetchId); \n    }, [fetchId]); \n\n  return (\n    isRender &&\n     <div>\n      <ul>\n        {movieCast.map(({profile_path, name, character}) => (\n          <li key={nanoid()}>\n            <img src={getPoster(profile_path)} alt={name} width={100} />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n          ))}\n      </ul>\n     </div> \n  );\n};\n\nexport default Cast;","import axios from \"axios\";\n\nasync function getTrending () {\n    const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/week';\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function searchMovie (q) {\n    const BASE_URL = 'https://api.themoviedb.org/3/search/movie';\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n        query: q,\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function getMovieDetails (movie_id) {\n    const BASE_URL = `https://api.themoviedb.org/3/movie/${movie_id}`;\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function getMovieCredits (movie_id) {\n    const BASE_URL = `https://api.themoviedb.org/3/movie/${movie_id}/credits`;\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nasync function getMovieReviews (movie_id) {\n    const BASE_URL = `https://api.themoviedb.org/3/movie/${movie_id}/reviews`;\n    const params = new URLSearchParams({\n        api_key: 'f06240549d838abb3d31b9bb8bd509ce',\n    });\n    return await axios.get(`${BASE_URL}?${params}`); \n};\n\nconst API = {\n    getTrending,\n    searchMovie,\n    getMovieDetails,\n    getMovieCredits,\n    getMovieReviews,\n};\n\nexport default API;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","isRender","setIsRender","movieCast","setMovieCast","movieId","useParams","fetchId","slice","length","getPoster","profile_path","id","API","data","cast","alert","useEffect","handleFetchMovie","map","name","character","src","alt","width","nanoid","getTrending","params","URLSearchParams","api_key","axios","searchMovie","q","query","getMovieDetails","movie_id","BASE_URL","getMovieCredits","getMovieReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}